// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using DoctorsWebApplication.Models;

namespace DoctorsWebApplication.Data;

public partial class DoctorsDatabase2023Context : DbContext
{
    public DoctorsDatabase2023Context(DbContextOptions<DoctorsDatabase2023Context> options)
        : base(options)
    {
    }

    public virtual DbSet<Address> Addresses { get; set; }

    public virtual DbSet<Appointment> Appointments { get; set; }

    public virtual DbSet<AppointmentPayment> AppointmentPayments { get; set; }

    public virtual DbSet<Doctor> Doctors { get; set; }

    public virtual DbSet<DoctorFee> DoctorFees { get; set; }

    public virtual DbSet<Drug> Drugs { get; set; }

    public virtual DbSet<DrugSupplier> DrugSuppliers { get; set; }

    public virtual DbSet<EmailAddress> EmailAddresses { get; set; }

    public virtual DbSet<Fee> Fees { get; set; }

    public virtual DbSet<GPSurgery> GPSurgeries { get; set; }

    public virtual DbSet<Patient> Patients { get; set; }

    public virtual DbSet<Person> People { get; set; }

    public virtual DbSet<PhoneNumber> PhoneNumbers { get; set; }

    public virtual DbSet<PrescribedDrug> PrescribedDrugs { get; set; }

    public virtual DbSet<Qualification> Qualifications { get; set; }

    public virtual DbSet<Supplier> Suppliers { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Address>(entity =>
        {
            entity.ToTable("Address", tb => tb.HasTrigger("Update_Address_Modified"));

            entity.Property(e => e.CreatedBy).HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.CreatedDate).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.ModifiedBy).HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.ModifiedDate).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.rowguid).HasDefaultValueSql("(newid())");

            entity.HasOne(d => d.Person).WithMany(p => p.Addresses)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Address_Person");
        });

        modelBuilder.Entity<Appointment>(entity =>
        {
            entity.ToTable("Appointment", tb => tb.HasTrigger("Update_Appointment_Modified"));

            entity.Property(e => e.CreatedBy).HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.CreatedDate).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.ModifiedBy).HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.ModifiedDate).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.rowguid).HasDefaultValueSql("(newid())");

            entity.HasOne(d => d.Doctor).WithMany(p => p.Appointments)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Appointment_Doctor");

            entity.HasOne(d => d.Patient).WithMany(p => p.Appointments)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Appointment_Patient");
        });

        modelBuilder.Entity<AppointmentPayment>(entity =>
        {
            entity.ToTable("AppointmentPayment", tb => tb.HasTrigger("Update_AppointmentPayment_Modified"));

            entity.Property(e => e.CreatedBy).HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.CreatedDate).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.ModifiedBy).HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.ModifiedDate).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.rowguid).HasDefaultValueSql("(newid())");

            entity.HasOne(d => d.Appointment).WithMany(p => p.AppointmentPayments)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AppointmentPayment_Appointment");

            entity.HasOne(d => d.DoctorFee).WithMany(p => p.AppointmentPayments)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AppointmentPayment_DoctorFee");
        });

        modelBuilder.Entity<Doctor>(entity =>
        {
            entity.HasKey(e => e.DoctorId).HasName("PK_Doctor_1");

            entity.ToTable("Doctor", tb => tb.HasTrigger("Update_Doctor_Modified"));

            entity.Property(e => e.CreatedBy).HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.CreatedDate).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.ModifiedBy).HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.ModifiedDate).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.rowguid).HasDefaultValueSql("(newid())");

            entity.HasOne(d => d.GPSurgery).WithMany(p => p.Doctors)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Doctor_GPSurgery");

            entity.HasOne(d => d.Person).WithOne(p => p.Doctor)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Doctor_Person");
        });

        modelBuilder.Entity<DoctorFee>(entity =>
        {
            entity.ToTable("DoctorFee", tb => tb.HasTrigger("Update_DoctorFee_Modified"));

            entity.Property(e => e.CreatedBy).HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.CreatedDate).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.ModifiedBy).HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.ModifiedDate).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.rowguid).HasDefaultValueSql("(newid())");

            entity.HasOne(d => d.Doctor).WithMany(p => p.DoctorFees)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DoctorFee_Doctor");

            entity.HasOne(d => d.Fee).WithMany(p => p.DoctorFees)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DoctorFee_Fee");
        });

        modelBuilder.Entity<Drug>(entity =>
        {
            entity.HasKey(e => e.DrugId).HasName("PK_PrescribedDrug");

            entity.ToTable("Drug", tb => tb.HasTrigger("Update_Drug_Modified"));

            entity.Property(e => e.CreatedBy).HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.CreatedDate).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.ModifiedBy).HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.ModifiedDate).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.rowguid).HasDefaultValueSql("(newid())");
        });

        modelBuilder.Entity<DrugSupplier>(entity =>
        {
            entity.ToTable("DrugSupplier", tb => tb.HasTrigger("Update_DrugSupplier_Modified"));

            entity.Property(e => e.CreatedBy).HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.CreatedDate).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.ModifiedBy).HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.ModifiedDate).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.rowguid).HasDefaultValueSql("(newid())");

            entity.HasOne(d => d.Drug).WithMany(p => p.DrugSuppliers)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DrugSupplier_Drug");

            entity.HasOne(d => d.Supplier).WithMany(p => p.DrugSuppliers)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DrugSupplier_Supplier");
        });

        modelBuilder.Entity<EmailAddress>(entity =>
        {
            entity.ToTable("EmailAddress", tb => tb.HasTrigger("Update_EmailAddress_Modified"));

            entity.Property(e => e.CreatedBy).HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.CreatedDate).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.ModifiedBy).HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.ModifiedDate).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.rowguid).HasDefaultValueSql("(newid())");

            entity.HasOne(d => d.Person).WithMany(p => p.EmailAddresses)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EmailAddress_Person");
        });

        modelBuilder.Entity<Fee>(entity =>
        {
            entity.ToTable("Fee", tb => tb.HasTrigger("Update_Fee_Modified"));

            entity.Property(e => e.CreatedBy).HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.CreatedDate).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.ModifiedBy).HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.ModifiedDate).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.rowguid).HasDefaultValueSql("(newid())");
        });

        modelBuilder.Entity<GPSurgery>(entity =>
        {
            entity.HasKey(e => e.GPSurgeryId).HasName("PK_DoctorsSurgery");

            entity.ToTable("GPSurgery", tb => tb.HasTrigger("Update_GPSurgery_Modified"));

            entity.Property(e => e.CreatedBy).HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.CreatedDate).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.ModifiedBy).HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.ModifiedDate).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.rowguid).HasDefaultValueSql("(newid())");
        });

        modelBuilder.Entity<Patient>(entity =>
        {
            entity.HasKey(e => e.PatientId).HasName("PK_Patient_1");

            entity.ToTable("Patient", tb => tb.HasTrigger("Update_Patient_Modified"));

            entity.Property(e => e.CreatedBy).HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.CreatedDate).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.ModifiedBy).HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.ModifiedDate).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.rowguid).HasDefaultValueSql("(newid())");

            entity.HasOne(d => d.Doctor).WithMany(p => p.Patients)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Patient_Doctor");

            entity.HasOne(d => d.Person).WithOne(p => p.Patient)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Patient_Person");
        });

        modelBuilder.Entity<Person>(entity =>
        {
            entity.ToTable("Person", tb => tb.HasTrigger("Update_Person_Modified"));

            entity.Property(e => e.CreatedBy).HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.CreatedDate).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.ModifiedBy).HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.ModifiedDate).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.rowguid).HasDefaultValueSql("(newid())");
        });

        modelBuilder.Entity<PhoneNumber>(entity =>
        {
            entity.ToTable("PhoneNumber", tb => tb.HasTrigger("Update_PhoneNumber_Modified"));

            entity.Property(e => e.CreateDate).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.CreatedBy).HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.ModifiedBy).HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.ModifiedDate).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.rowguid).HasDefaultValueSql("(newid())");

            entity.HasOne(d => d.Person).WithMany(p => p.PhoneNumbers)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PhoneNumber_Person");
        });

        modelBuilder.Entity<PrescribedDrug>(entity =>
        {
            entity.HasKey(e => e.PrescribedDrugId).HasName("PK_PrescribedDrug_1");

            entity.ToTable("PrescribedDrug", tb => tb.HasTrigger("Update_PrescribedDrug_Modified"));

            entity.Property(e => e.CreatedBy).HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.CreatedDate).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.ModifiedBy).HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.ModifiedDate).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.rowguid).HasDefaultValueSql("(newid())");

            entity.HasOne(d => d.Doctor).WithMany(p => p.PrescribedDrugs)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PrescribedDrug_Doctor");

            entity.HasOne(d => d.Drug).WithMany(p => p.PrescribedDrugs)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PrescribedDrug_Drug");

            entity.HasOne(d => d.Patient).WithMany(p => p.PrescribedDrugs)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PrescribedDrug_Patient");
        });

        modelBuilder.Entity<Qualification>(entity =>
        {
            entity.ToTable("Qualification", tb => tb.HasTrigger("Update_Qualification_Modified"));

            entity.Property(e => e.CreatedBy).HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.CreatedDate).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.ModifiedBy).HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.ModifiedDate).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.rowguid).HasDefaultValueSql("(newid())");

            entity.HasOne(d => d.Doctor).WithMany(p => p.Qualifications)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Qualification_Doctor");
        });

        modelBuilder.Entity<Supplier>(entity =>
        {
            entity.ToTable("Supplier", tb => tb.HasTrigger("Update_Supplier_Modified"));

            entity.Property(e => e.CreatedBy).HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.CreatedDate).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.ModifiedBy).HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.ModifiedDate).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.rowguid).HasDefaultValueSql("(newid())");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}